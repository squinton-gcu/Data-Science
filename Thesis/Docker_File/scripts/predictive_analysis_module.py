# -*- coding: utf-8 -*-
"""Predictive_Analysis_Module.ipynb

Automatically generated by Colaboratory.


## Predictive Analysis Module
This module creates looks at the top features from the human trauma list and looks into determining a logistic prediction the ALZ dataset
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.metrics import f1_score
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score

ALZ_plasma_p = pd.read_csv("ALZ_plasma_processed.csv", index_col=0).transpose()
ALZ_csf_p = pd.read_csv("ALZ_csf_processed.csv", index_col=0).transpose()
trauma_human_p = pd.read_csv("trauma_human_processed.csv", index_col=0).transpose()

sort_stress_top_all_plasma_cor = pd.read_csv("sort_stress_top_all_plasma_cor.csv", index_col=0)
sort_stress_top_top_plasma_cor =  pd.read_csv("sort_stress_top_top_plasma_cor.csv", index_col=0)
sort_stress_top_all_csf_cor =  pd.read_csv("Selected_Features/sort_stress_top_all_csf_cor.csv", index_col=0)
sort_stress_top_top_csf_cor =  pd.read_csv("sort_stress_top_top_csf_cor.csv", index_col=0)

def get_test_train(dataframe):
  """
  Split data into test train set
  """
  train,test = train_test_split(dataframe, test_size=0.4)
  y_train_headers = train.index
  Y_train_num = []
  for i in y_train_headers:
    if i != None and "AD" in i:
      Y_train_num.append(1)
    else:
      Y_train_num.append(0)

  y_test_headers = test.index
  Y_test_num = []
  for i in y_test_headers:
    if i != None and "AD" in i:
      Y_test_num.append(1)
    else:
      Y_test_num.append(0)
  return train, test, Y_train_num, Y_test_num

def get_preds(X_train, X_test, Y_train, Y_test, metab):
  """
  This function will create the logistic regression predictive model and
  get the metrics. It will also create a confusion matrix
  """
  train_set = np.array(X_train[metab]).reshape(-1,1)
  test_set = np.array(X_test[metab]).reshape(-1,1)
  LogModel = LogisticRegression().fit(train_set, Y_train)
  y_pred = LogModel.predict(test_set)

  f1_ex = f1_score(Y_test, y_pred)
  accuracy = accuracy_score(Y_test, y_pred)
  prec_ex = precision_score(Y_test, y_pred)
  recall_ex = recall_score(Y_test, y_pred)

  cm = confusion_matrix(Y_test, y_pred)
  matrix_plot = ConfusionMatrixDisplay(confusion_matrix=cm)
  return f1_ex, accuracy, prec_ex, recall_ex, matrix_plot

plasma_trainX, plasma_testX, plasma_trainY, plasma_testY = get_test_train(ALZ_plasma_p)
csf_trainX, csf_testX, csf_trainY, csf_testY = get_test_train(ALZ_csf_p)

sort_stress_top_top_plasma_cor.index[0]

f1, acc, prec, recall, matrix = get_preds(plasma_trainX, plasma_testX, plasma_trainY, plasma_testY, sort_stress_top_all_plasma_cor.index[0])

stress_plasma1 = pd.DataFrame()
matrix_list = []
for metabolite in range(len(sort_stress_top_all_plasma_cor)):
  f1, acc, prec, recall, matrix = get_preds(plasma_trainX, plasma_testX, plasma_trainY, plasma_testY, sort_stress_top_all_plasma_cor.index[metabolite])
  metric_list = [f1, acc, prec, recall]
  stress_plasma1[sort_stress_top_all_plasma_cor.index[metabolite]] = metric_list
  matrix_list.append(matrix)

stress_plasma1.index = ['f1', 'acc', 'prec', 'recall']
stress_plasma1 = stress_plasma1.transpose().sort_values(by=['acc'])

stress_plasma2 = pd.DataFrame()
matrix_list = []
for metabolite in range(len(sort_stress_top_top_plasma_cor)):
  f1, acc, prec, recall, matrix = get_preds(plasma_trainX, plasma_testX, plasma_trainY, plasma_testY, sort_stress_top_top_plasma_cor.index[metabolite])
  metric_list = [f1, acc, prec, recall]
  stress_plasma2[sort_stress_top_top_plasma_cor.index[metabolite]] = metric_list
  matrix_list.append(matrix)

stress_plasma2.index = ['f1', 'acc', 'prec', 'recall']
stress_plasma2 = stress_plasma2.transpose().sort_values(by=['acc'])

stress_csf1 = pd.DataFrame()
matrix_list = []
for metabolite in range(len(sort_stress_top_all_csf_cor)):
  f1, acc, prec, recall, matrix = get_preds(csf_trainX, csf_testX, csf_trainY, csf_testY, sort_stress_top_all_csf_cor.index[metabolite])
  metric_list = [f1, acc, prec, recall]
  stress_csf1[sort_stress_top_all_csf_cor.index[metabolite]] = metric_list
  matrix_list.append(matrix)

stress_csf1.index = ['f1', 'acc', 'prec', 'recall']
stress_csf1 = stress_csf1.transpose().sort_values(by=['acc'])

stress_csf2 = pd.DataFrame()
matrix_list = []
for metabolite in range(len(sort_stress_top_top_csf_cor)):
  f1, acc, prec, recall, matrix = get_preds(csf_trainX, csf_testX, csf_trainY, csf_testY, sort_stress_top_top_csf_cor.index[metabolite])
  metric_list = [f1, acc, prec, recall]
  stress_csf2[sort_stress_top_top_csf_cor.index[metabolite]] = metric_list
  matrix_list.append(matrix)

stress_csf2.index = ['f1', 'acc', 'prec', 'recall']
stress_csf2 = stress_csf2.transpose().sort_values(by=['acc'])

stress_plasma1.to_csv("stress_top_plasma_all_pred.csv")
stress_plasma2.to_csv("stress_top_plasma_top_pred.csv")
stress_csf1.to_csv("stress_top_csf_all_pred.csv")
stress_csf2.to_csv("stress_top_csf_top_pred.csv")


